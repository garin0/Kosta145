** Servlet 기본 **
1. 환경 설정
: WAS(apache-tomcat) 설치 및 설정
	-> conf/server.xml 웹포트 변경(오라클 웹포트와 중복되므로)
						get방식 요청 시 한글 처리를 위해
						URIEnconding ="utf-8"
	-> conf/context.xml reloadable="true"
						개발 시점에 변경되는 코드를 자동으로 리로딩하도록 설정
						(workspace -- 배포 --> webapps)
						
2. Servlet
							WAS(web server + web container
 	browser --request-->									<--> DB
 			<--response--					
 --------------------------------
 	browser :  html 문서를 번역
 				html,javascript,css를 해석하여 웹 화면을 제공
 				http 기반 메세지를 송수신
 				
 	http: hypertext tansfer protocol
 	
 	WAS: web server + web container
 	
 	Web Server : html 서비스
 	
 	Web Container : servlet container or jsp engine 이라고도 한다.
 					Servlet과 JSP가 실행될 수 있는 환경을 제공한다.
 					( Servlet LifeCycle , JSP를 Java(Servlet)로 변환 등.. )
 					
 	http 요청방식 GET 과 POST
 	
 	GET 방식 : 정보 조회 용도
 			  모든 링크는 GET방식으로 요청된다.
 			  브라우저 URL에 노출된다.
 			  전송 데이터 양은 한정된다.
 			  Form tag에서 별도의 method(전송방식)을 명시하지 않으면 기본이 get방식으로 요청된다.
 			  
 	POST 방식 : 정보 전송 용도
 				브라우저 URL에 노출되지 않고 HTTP body 부분으로 전송된다.
 				즉, 보안성이 get방식보다 높다.
 				사용자 정보 및 많은 용량의 데이터는 POST으로 전송해야 한다.
 				POST 방식으로 전송되는 데이터에 대한 서버 프로그램 차원에서의 별도의
 				한글처리가 필요하다.( request.setCharacterEncoding("utf-8"); )
 				
 client								Servlet
 http get방식 요청  ------------->   doGet(request,response)
 
 http post방식 요청 ------------->   doPost(request,response)
 
 web.xml : DD (Deployment Descriptor)
 			웹 어플리케이션의 설정정보(메타정보)를 명시한다.
 			Wep application 최초 시작할 때 DD 파일을 로딩한다.
 			( ServletConfig, ServletContext, Session 설정 등 )
 			
 **메타데이터(meta-data)**
	데이터의 데이터. 설정정보
	웹 어플리케이션의 메타데이터는 XML과 Annotation 으로 작성 가능하다.
	Annotation: 의미있는 주석 @Override, @WebServlet(url), @Controler 등...
				소스코드 + 메타데이터가 결합하는 방식
	XML: eXtensible Markup Language
 		 확장 가능 마크업 언어	
 		 -> 주로 메타정보를 저장할 때 사용
 		 -> 2000년 중반에는 Ajax를 위해 사용했으나 최근에는 JSON으로 대체 	
 		 소스코드 +  메타데이타가 분리되는 방식
 		 
 	web.xml 상에서 서블릿 설정
  <servlet>
 <!-- 서블릿 이름: 임의로 정하며 servlet-mapping과 연결 -->	
  	<servlet-name>MethodServlet</servlet-name>
  <!-- 실제 클래스의 패키지명과 클래스명 -->
  	<servlet-class>step2.MethodServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	<!-- servlet 태그의 servlet-name과 일치 -->
  	<servlet-name>MethodServlet</servlet-name>
  	<!-- client에서 요청하는 서버 프로그램 url(action) -->
  	<url-pattern>/MethodServlet</url-pattern>
  </servlet-mapping>
 		 
 		 
 == 확인해볼 용어 ==
 Servlet
 WAS
 HTTP
 browser
 Web Container
 web.xml
 form method
 form action
 get방식/post방식
 javascript
 HttpServletRequest와 HttpServletResponse
 
 생각해볼 점) Servlet,HttpServletRequest,HttpServletResponse,ServletConfig,ServletContext
 --> 위의 모든 요소들이 모두 다 인터페이스이다.
 왜 많은 주요 요소들이 인터페이스로 설계했을까?
 == 내일 수업 주요 목차 ==
 - request.getParameterValues()
 - Servlet LifeCycle
 - ServletConfig
 - ServletContext