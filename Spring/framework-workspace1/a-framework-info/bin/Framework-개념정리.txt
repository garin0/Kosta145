** Framework 개념정리 **
Spring Framework의 주요 개념
: IOC (DI와 DL)
  AOP
  SpringMVC
  
- MyBatis Framework
- Tiles Framework
--------------------------
용어 정리
- Module(모듈): 독립적인 기능 단위를 가진 소프트웨어
- 응집도(cohesion)와 결합도(coupling)
  "응집도는 높이고, 결합도는 낮춘다."
  응집도(cohesion): 하나의 모듈이 하나의 역할을 담당
  결합도(coupling): 모듈간의 상호 의존도
 
- Object: 객체지향 시스템의 기본단위로 기능과 속성을 가지고 있다.
- Class: Object의 설계도(Object 생성을 위한 틀)
- library: 재사용 가능한 클래스들의 모음
- API(Application Programming Interface): 응용 프로그램을 개발하기 위한
  인터페이스
- package : class들을 분류하기 위한 것
- component: 프로그램(class or object)들이 모여 독립적인 기능단위를 
			 구성하고 부품화될 때 컴포넌트라고 한다.
- Framework: 뼈대, 틀
			 - 소프트웨어를 설계,구현,운영하기 위한 기반을 제공
			 - 반완전한 어플리케이션을 제공
			 (나머지는 현지화(커스터마이징))
			 : 어플리케이션(또는 시스템)을 설계,구현,운영하기 위한
			 다양한 지원을 통해 비즈니스(업무)에 집중할 수 
			 있도록 하는 것이 프레임워크이다.
			 
----------------------------
IOC(Inversion of Control)
-> 제어의 역행(역제어)
: 계층간의 의존관계의 결합도를 낮추기 위해 적용(loose coupling)

ex) 기존 방식으로 제어
	사용자 --생성--> 티켓
	IOC 적용
				컨테이너(Spring IOC 컨테이너)
	사용자<--									<-- 티켓
: 기존 제어방식은 사용하는 측에서 객체를 생성(or 확보)했다면
IOC(제어의 역행) 방식은 IOC 컨테이너에서 필요로 하는 객체를
생성하여 사용하는 측으로 객체를 주는 동작원리로
결합도를 낮추어 유지보수성을 향상시킨다.

IOC 적용을 위한 기법
- DL(Dependency Lookup)
: 의존대상(사용할 객체)을 검색(Lookup)을 통해 반환받는 방식
- DI(Dependency Injection)
: 의존대상(사용할 객체)을 주입(inject)을 통해 받는 방식


** Maven **
Dependency Management: 의존 라이브러리 관리
-> 프로젝트에서 필요한 의존 라이브러리에 대한 신속한 설정과
	버전별 관리가 가능하다.
	pom.xml : pom(project object model)

** Log4j **
자바 어플리케이션을 위한 로그 라이브러리
로그를 레벨별로 작성(콘솔 및 파일)
trace<debug<info<warn<error<fatal

** AOP **
Aspect Oriented Programming
"AOP는 OOP를 더욱 OOP답게 한다."

AOP는 관점 지향 프로그래밍
시스템을 핵심(Core) 관심사항과 공통(or 횡단 or cross-cutting or common)
관심사항으로 구분하여 분석,설계,구현,운영한다.
-> AOP는 공통관심사항을 별도의 모듈로 설계 구현하여
   생산성과 유지보수성을 향상시키는 것을 목적으로 한다.
   
AOP 용어
- advice : 공통관심사항을 어느 시점에 적용할 것인가
		  before advice, after advice, after-returning advice
		  after-throwing advice, around advice
- pointcut : 공통관심사항을 적용하는 대상을 지정(적용대상을 정하는 알고리즘)
			within()
			execution()
			bean()

-------------------------------

Interface -> 상속,다형성
IOC -> DL,DI
AOP why?
